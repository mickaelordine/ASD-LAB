TESTO ESERCIZIO
Esercizio 2 - Skip List

Linguaggio richiesto: C

Testo
Realizzare una struttura dati chiamata skip_list. La skip_list è un tipo di lista concatenata che memorizza una lista ordinata di elementi.
Al contrario delle liste concatenate classiche, la skip_list è una struttura dati probabilistica che permette di 
realizzare l'operazione di ricerca con complessità O(log n) 
in termini di tempo. Anche le operazioni di inserimento e cancellazione di elementi possono essere realizzate in tempo O(log n). 
Per questa ragione, la skip_list è una delle 
strutture dati che vengono spesso utilizzate per indicizzare dati.
Ogni nodo di una lista concatenata contiene un puntatore all'elemento successivo nella lista. Dobbiamo quindi scorrere la lista 
sequenzialmente per trovare un elemento nella lista.
La skip_list velocizza l'operazione di ricerca creando delle "vie espresse" che permettono di saltare parte della lista durante l'operazione di ricerca. 
Questo è possibile perché 
ogni nodo della skip_list contiene non solo un singolo puntatore al prossimo elemento della lista, ma un array di puntatori che ci permettono di 
saltare a diversi punti seguenti 
nella lista. Un esempio di questo schema è rappresentato nella seguente figura:

Si implementi quindi una libreria che realizza la struttura dati skip_list. L'implementazione deve essere generica per quanto riguarda il tipo dei dati memorizzati 
nella struttura. 
Come suggerimento, una possibile definizione del tipo di dati skip_list è la seguente:

#define MAX_HEIGHT ....

typedef struct _SkipList SkipList;
typedef struct _Node Node;

struct _SkipList {
  Node *head;
  unsigned int max_level;
  int (*compare)(void*, void*);
};

struct _Node {
  Node **next;
  unsigned int size;
  void *item;
};


Dove:


MAX_HEIGHT: è una costante che definisce il massimo numero di puntatori che possono esserci in un singolo nodo della skip_list. Come si vede nella figura, 
ogni nodo può avere un numero distinto di puntatori.


unsigned int size: è il numero di puntatori in un dato nodo della skip_list.


unsigned int max_level: determina il massimo attuale tra i vari size.


La libreria deve includere le due operazioni elencate sotto, che sono riportate in pseudo-codice. Tradurre lo pseudo-codice in C.

insertSkipList: Inserisce I nella skiplist list


insertSkipList(list, I)

    new = createNode(I, randomLevel())
    if new->size > list->max_level
        list->max_level = new->size

    x = list->head
    for k = list->max_level downto 1 do
        if (x->next[k] == NULL || I < x->next[k]->item)
            if k < new->size {
              new->next[k] = x->next[k]
              x->next[k] = new
            }
        else
            x = x->next[k]


La funzione randomLevel() determina il numero di puntatori da includere nel nuovo nodo e deve essere realizzata conformemente al seguente algoritmo. 
Spiegare il vantaggio di questo algoritmo nella relazione da consegnare con l'esercizio:

randomLevel()
    lvl = 1

    // random() returns a random value in [0...1)
    while random() < 0.5 and lvl < MAX_HEIGHT do
        lvl = lvl + 1
    return lvl



searchSkipList: Verifica se I è presente nella skiplist list

searchSkipList(list, I)
    x = list->head

    // loop invariant: x->item < I
    for i = list->max_level downto 1 do
        while x->next[i]->item < I do
            x = x->next[i]

    // x->item < I <= x->next[1]->item
    x = x->next[1]
    if x->item == item then
        return x->item
    else
        return failure


La libreria deve anche includere delle funzioni che permettono di creare una skip_list vuota e cancellare completamente una skip_list esistente. 
Quest'ultima operazione, in particolare, 
deve liberare correttamente tutta la memoria allocata per la skip_list.

Unit Testing
Implementare gli unit-test per tutte le operazioni della skip_list secondo le indicazioni suggerite nel documento Unit Testing.

Uso delle funzioni implementate
All'indirizzo

https://datacloud.di.unito.it/index.php/s/taii8aA8rNnXgCN


potete trovare un dizionario (dictionary.txt) e un file da correggere (correctme.txt).
Il dizionario contiene un elenco di parole. Le parole sono scritte di seguito, ciascuna su una riga.
Il file correctme.txt contiene un testo da correggere. Alcune parole in questo testo non ci sono nel dizionario.
Si implementi una applicazione che usa la struttura dati skip_list per determinare in maniera efficiente la lista di parole nel testo da 
correggere non presenti nel dizionario dato come input al programma.
Si sperimenti il funzionamento dell'applicazione considerando diversi valori per la constante MAX_HEIGHT, 
riportando in una breve relazione (circa una pagina) i risultati degli esperimenti.
Si ricorda che il dizionario e correctme.txt NON DEVONO ESSERE OGGETTO DI COMMIT SU GIT!

Condizioni per la consegna:
-- Creare una sottocartella chiamata ex2 all'interno del repository.
-- La consegna deve obbligatoriamente contenere un Makefile. Il Makefile deve produrre all'interno di ex2/build un file eseguibile chiamato main_ex2.
-- main_ex2 deve ricevere come parametri il path del dizionario da usare come riferimento e il file da correggere, necessariamente in quest'ordine. 
Il risultato va stampato a schermo, con le parole ordinate come nel file da correggere. Per esempio:

$ ./main_ex2 /tmp/data/dictionary.txt /tmp/data/correctme.txt 
cinqve
perpeteva
squola
domandrono
vuolessi
scrissi
corpito
wita
